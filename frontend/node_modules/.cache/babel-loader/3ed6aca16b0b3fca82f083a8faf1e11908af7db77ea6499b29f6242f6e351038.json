{"ast":null,"code":"var _jsxFileName = \"E:\\\\pcb-defect-detector\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from 'react';\nimport { Upload, Camera, AlertCircle, CheckCircle, Loader2, X } from 'lucide-react';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst PCBDefectDetector = () => {\n  _s();\n  const [image, setImage] = useState(null);\n  const [imagePreview, setImagePreview] = useState(null);\n  const [detections, setDetections] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [imageDimensions, setImageDimensions] = useState({\n    width: 0,\n    height: 0\n  });\n  const fileInputRef = useRef(null);\n  const defectColors = {\n    missing_hole: '#FF6B6B',\n    mouse_bite: '#4ECDC4',\n    open_circuit: '#45B7D1',\n    short: '#FFA07A',\n    spur: '#98D8C8',\n    spurious_copper: '#F7DC6F'\n  };\n  const handleImageUpload = event => {\n    const file = event.target.files[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = e => {\n        setImage(e.target.result);\n        setImagePreview(e.target.result);\n        setDetections([]);\n        setError(null);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n  const detectDefects = async () => {\n    if (!image) return;\n    setLoading(true);\n    setError(null);\n    try {\n      const formData = new FormData();\n      const blob = await fetch(image).then(res => res.blob());\n      formData.append('image', blob, 'pcb_image.png');\n      const response = await fetch('http://localhost:5000/predict', {\n        method: 'POST',\n        body: formData\n      });\n      const data = await response.json();\n      if (response.ok) {\n        setDetections(data.predictions || []);\n        // Dummy fallback for image dimensions (optional)\n        setImageDimensions({\n          width: 640,\n          height: 640\n        });\n      } else {\n        setError(data.error || 'Detection failed');\n      }\n    } catch (err) {\n      console.error(err);\n      setError('Failed to connect to the backend. Make sure Flask server is running.');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const clearImage = () => {\n    setImage(null);\n    setImagePreview(null);\n    setDetections([]);\n    setError(null);\n    if (fileInputRef.current) {\n      fileInputRef.current.value = '';\n    }\n  };\n  const getBoundingBoxStyle = bbox => {\n    const scaleX = 400 / imageDimensions.width;\n    const scaleY = 300 / imageDimensions.height;\n    return {\n      position: 'absolute',\n      left: bbox.x1 * scaleX,\n      top: bbox.y1 * scaleY,\n      width: (bbox.x2 - bbox.x1) * scaleX,\n      height: (bbox.y2 - bbox.y1) * scaleY,\n      border: `2px solid ${defectColors[bbox.class] || '#FF0000'}`,\n      backgroundColor: 'transparent',\n      pointerEvents: 'none'\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen bg-gray-50 p-4\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"max-w-6xl mx-auto\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white rounded-lg shadow-lg p-6 mb-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"text-3xl font-bold text-gray-800 mb-2 flex items-center gap-2\",\n          children: [/*#__PURE__*/_jsxDEV(Camera, {\n            className: \"text-blue-600\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 13\n          }, this), \"PCB Defect Detection System\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-gray-600 mb-6\",\n          children: \"Upload a PCB image to detect defects: missing holes, mouse bites, open circuits, shorts, spurs, and spurious copper\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-6\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-center gap-4 mb-4\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"flex items-center gap-2 bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 cursor-pointer transition-colors\",\n              children: [/*#__PURE__*/_jsxDEV(Upload, {\n                size: 20\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 112,\n                columnNumber: 17\n              }, this), \"Upload PCB Image\", /*#__PURE__*/_jsxDEV(\"input\", {\n                ref: fileInputRef,\n                type: \"file\",\n                accept: \"image/*\",\n                onChange: handleImageUpload,\n                className: \"hidden\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 114,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 15\n            }, this), image && /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: clearImage,\n              className: \"flex items-center gap-2 bg-gray-500 text-white px-4 py-2 rounded-lg hover:bg-gray-600 transition-colors\",\n              children: [/*#__PURE__*/_jsxDEV(X, {\n                size: 20\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 128,\n                columnNumber: 19\n              }, this), \"Clear\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 13\n          }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-center gap-2 bg-red-100 text-red-700 p-3 rounded-lg mb-4\",\n            children: [/*#__PURE__*/_jsxDEV(AlertCircle, {\n              size: 20\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 17\n            }, this), error]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this), imagePreview && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grid grid-cols-1 lg:grid-cols-2 gap-6\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"space-y-4\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"relative inline-block\",\n              children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                src: imagePreview,\n                alt: \"PCB\",\n                className: \"w-full max-w-md h-auto rounded-lg shadow-md\",\n                style: {\n                  maxHeight: '400px',\n                  objectFit: 'contain'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 148,\n                columnNumber: 19\n              }, this), detections.map((detection, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n                style: getBoundingBoxStyle(detection.bbox),\n                className: \"pointer-events-none\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"absolute -top-6 left-0 text-xs font-bold px-1 py-0.5 rounded text-white\",\n                  style: {\n                    backgroundColor: defectColors[detection.class] || '#FF0000'\n                  },\n                  children: [detection.class, \" (\", (detection.confidence * 100).toFixed(1), \"%)\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 162,\n                  columnNumber: 23\n                }, this)\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 157,\n                columnNumber: 21\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 147,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: detectDefects,\n              disabled: loading,\n              className: \"w-full bg-green-600 text-white px-6 py-3 rounded-lg hover:bg-green-700 disabled:bg-gray-400 disabled:cursor-not-allowed transition-colors flex items-center justify-center gap-2\",\n              children: loading ? /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(Loader2, {\n                  className: \"animate-spin\",\n                  size: 20\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 179,\n                  columnNumber: 23\n                }, this), \"Detecting Defects...\"]\n              }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(CheckCircle, {\n                  size: 20\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 184,\n                  columnNumber: 23\n                }, this), \"Detect Defects\"]\n              }, void 0, true)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"space-y-4\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"text-xl font-semibold text-gray-800\",\n              children: [\"Detection Results (\", detections.length, \" defects found)\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 193,\n              columnNumber: 17\n            }, this), detections.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-gray-500 text-center py-8\",\n              children: loading ? 'Processing image...' : 'No defects detected or click \"Detect Defects\" to analyze the image.'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 198,\n              columnNumber: 19\n            }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"space-y-3\",\n              children: detections.map((detection, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"bg-gray-50 p-4 rounded-lg border-l-4\",\n                style: {\n                  borderLeftColor: defectColors[detection.class] || '#FF0000'\n                },\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"flex items-center justify-between mb-2\",\n                  children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                    className: \"font-semibold text-gray-800 capitalize\",\n                    children: detection.class.replace('_', ' ')\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 210,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"text-sm text-gray-600\",\n                    children: [(detection.confidence * 100).toFixed(1), \"% confidence\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 213,\n                    columnNumber: 27\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 209,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"text-sm text-gray-600\",\n                  children: [\"Location: (\", detection.bbox.x1.toFixed(0), \", \", detection.bbox.y1.toFixed(0), \") - (\", detection.bbox.x2.toFixed(0), \", \", detection.bbox.y2.toFixed(0), \")\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 217,\n                  columnNumber: 25\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 204,\n                columnNumber: 23\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 202,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mt-6\",\n              children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                className: \"font-semibold text-gray-800 mb-3\",\n                children: \"Defect Types\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 228,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"grid grid-cols-2 gap-2\",\n                children: Object.entries(defectColors).map(([defect, color]) => /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"flex items-center gap-2\",\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"w-4 h-4 rounded border\",\n                    style: {\n                      backgroundColor: color\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 232,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"text-sm capitalize\",\n                    children: defect.replace('_', ' ')\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 236,\n                    columnNumber: 25\n                  }, this)]\n                }, defect, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 231,\n                  columnNumber: 23\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 229,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 227,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n};\n_s(PCBDefectDetector, \"gcm1haDjDmtmym9ZUn1RnCZ+0zg=\");\n_c = PCBDefectDetector;\nexport default PCBDefectDetector;\nvar _c;\n$RefreshReg$(_c, \"PCBDefectDetector\");","map":{"version":3,"names":["React","useState","useRef","Upload","Camera","AlertCircle","CheckCircle","Loader2","X","jsxDEV","_jsxDEV","Fragment","_Fragment","PCBDefectDetector","_s","image","setImage","imagePreview","setImagePreview","detections","setDetections","loading","setLoading","error","setError","imageDimensions","setImageDimensions","width","height","fileInputRef","defectColors","missing_hole","mouse_bite","open_circuit","short","spur","spurious_copper","handleImageUpload","event","file","target","files","reader","FileReader","onload","e","result","readAsDataURL","detectDefects","formData","FormData","blob","fetch","then","res","append","response","method","body","data","json","ok","predictions","err","console","clearImage","current","value","getBoundingBoxStyle","bbox","scaleX","scaleY","position","left","x1","top","y1","x2","y2","border","class","backgroundColor","pointerEvents","className","children","fileName","_jsxFileName","lineNumber","columnNumber","size","ref","type","accept","onChange","onClick","src","alt","style","maxHeight","objectFit","map","detection","index","confidence","toFixed","disabled","length","borderLeftColor","replace","Object","entries","defect","color","_c","$RefreshReg$"],"sources":["E:/pcb-defect-detector/frontend/src/App.js"],"sourcesContent":["import React, { useState, useRef } from 'react';\nimport { Upload, Camera, AlertCircle, CheckCircle, Loader2, X } from 'lucide-react';\n\nconst PCBDefectDetector = () => {\n  const [image, setImage] = useState(null);\n  const [imagePreview, setImagePreview] = useState(null);\n  const [detections, setDetections] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [imageDimensions, setImageDimensions] = useState({ width: 0, height: 0 });\n  const fileInputRef = useRef(null);\n\n  const defectColors = {\n    missing_hole: '#FF6B6B',\n    mouse_bite: '#4ECDC4',\n    open_circuit: '#45B7D1',\n    short: '#FFA07A',\n    spur: '#98D8C8',\n    spurious_copper: '#F7DC6F'\n  };\n\n  const handleImageUpload = (event) => {\n    const file = event.target.files[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        setImage(e.target.result);\n        setImagePreview(e.target.result);\n        setDetections([]);\n        setError(null);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\nconst detectDefects = async () => {\n  if (!image) return;\n\n  setLoading(true);\n  setError(null);\n\n  try {\n    const formData = new FormData();\n    const blob = await fetch(image).then(res => res.blob());\n    formData.append('image', blob, 'pcb_image.png');\n\n    const response = await fetch('http://localhost:5000/predict', {\n      method: 'POST',\n      body: formData,\n    });\n\n    const data = await response.json();\n\n    if (response.ok) {\n      setDetections(data.predictions || []);\n      // Dummy fallback for image dimensions (optional)\n      setImageDimensions({ width: 640, height: 640 });\n    } else {\n      setError(data.error || 'Detection failed');\n    }\n  } catch (err) {\n    console.error(err);\n    setError('Failed to connect to the backend. Make sure Flask server is running.');\n  } finally {\n    setLoading(false);\n  }\n};\n\n\n  const clearImage = () => {\n    setImage(null);\n    setImagePreview(null);\n    setDetections([]);\n    setError(null);\n    if (fileInputRef.current) {\n      fileInputRef.current.value = '';\n    }\n  };\n\n  const getBoundingBoxStyle = (bbox) => {\n    const scaleX = 400 / imageDimensions.width;\n    const scaleY = 300 / imageDimensions.height;\n    \n    return {\n      position: 'absolute',\n      left: bbox.x1 * scaleX,\n      top: bbox.y1 * scaleY,\n      width: (bbox.x2 - bbox.x1) * scaleX,\n      height: (bbox.y2 - bbox.y1) * scaleY,\n      border: `2px solid ${defectColors[bbox.class] || '#FF0000'}`,\n      backgroundColor: 'transparent',\n      pointerEvents: 'none'\n    };\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 p-4\">\n      <div className=\"max-w-6xl mx-auto\">\n        <div className=\"bg-white rounded-lg shadow-lg p-6 mb-6\">\n          <h1 className=\"text-3xl font-bold text-gray-800 mb-2 flex items-center gap-2\">\n            <Camera className=\"text-blue-600\" />\n            PCB Defect Detection System\n          </h1>\n          <p className=\"text-gray-600 mb-6\">\n            Upload a PCB image to detect defects: missing holes, mouse bites, open circuits, shorts, spurs, and spurious copper\n          </p>\n\n          {/* Upload Section */}\n          <div className=\"mb-6\">\n            <div className=\"flex items-center gap-4 mb-4\">\n              <label className=\"flex items-center gap-2 bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 cursor-pointer transition-colors\">\n                <Upload size={20} />\n                Upload PCB Image\n                <input\n                  ref={fileInputRef}\n                  type=\"file\"\n                  accept=\"image/*\"\n                  onChange={handleImageUpload}\n                  className=\"hidden\"\n                />\n              </label>\n              \n              {image && (\n                <button\n                  onClick={clearImage}\n                  className=\"flex items-center gap-2 bg-gray-500 text-white px-4 py-2 rounded-lg hover:bg-gray-600 transition-colors\"\n                >\n                  <X size={20} />\n                  Clear\n                </button>\n              )}\n            </div>\n\n            {error && (\n              <div className=\"flex items-center gap-2 bg-red-100 text-red-700 p-3 rounded-lg mb-4\">\n                <AlertCircle size={20} />\n                {error}\n              </div>\n            )}\n          </div>\n\n          {/* Image Preview and Detection */}\n          {imagePreview && (\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              {/* Image Display */}\n              <div className=\"space-y-4\">\n                <div className=\"relative inline-block\">\n                  <img\n                    src={imagePreview}\n                    alt=\"PCB\"\n                    className=\"w-full max-w-md h-auto rounded-lg shadow-md\"\n                    style={{ maxHeight: '400px', objectFit: 'contain' }}\n                  />\n                  \n                  {/* Bounding boxes overlay */}\n                  {detections.map((detection, index) => (\n                    <div\n                      key={index}\n                      style={getBoundingBoxStyle(detection.bbox)}\n                      className=\"pointer-events-none\"\n                    >\n                      <div \n                        className=\"absolute -top-6 left-0 text-xs font-bold px-1 py-0.5 rounded text-white\"\n                        style={{ backgroundColor: defectColors[detection.class] || '#FF0000' }}\n                      >\n                        {detection.class} ({(detection.confidence * 100).toFixed(1)}%)\n                      </div>\n                    </div>\n                  ))}\n                </div>\n\n                <button\n                  onClick={detectDefects}\n                  disabled={loading}\n                  className=\"w-full bg-green-600 text-white px-6 py-3 rounded-lg hover:bg-green-700 disabled:bg-gray-400 disabled:cursor-not-allowed transition-colors flex items-center justify-center gap-2\"\n                >\n                  {loading ? (\n                    <>\n                      <Loader2 className=\"animate-spin\" size={20} />\n                      Detecting Defects...\n                    </>\n                  ) : (\n                    <>\n                      <CheckCircle size={20} />\n                      Detect Defects\n                    </>\n                  )}\n                </button>\n              </div>\n\n              {/* Detection Results */}\n              <div className=\"space-y-4\">\n                <h3 className=\"text-xl font-semibold text-gray-800\">\n                  Detection Results ({detections.length} defects found)\n                </h3>\n\n                {detections.length === 0 ? (\n                  <div className=\"text-gray-500 text-center py-8\">\n                    {loading ? 'Processing image...' : 'No defects detected or click \"Detect Defects\" to analyze the image.'}\n                  </div>\n                ) : (\n                  <div className=\"space-y-3\">\n                    {detections.map((detection, index) => (\n                      <div\n                        key={index}\n                        className=\"bg-gray-50 p-4 rounded-lg border-l-4\"\n                        style={{ borderLeftColor: defectColors[detection.class] || '#FF0000' }}\n                      >\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <h4 className=\"font-semibold text-gray-800 capitalize\">\n                            {detection.class.replace('_', ' ')}\n                          </h4>\n                          <span className=\"text-sm text-gray-600\">\n                            {(detection.confidence * 100).toFixed(1)}% confidence\n                          </span>\n                        </div>\n                        <div className=\"text-sm text-gray-600\">\n                          Location: ({detection.bbox.x1.toFixed(0)}, {detection.bbox.y1.toFixed(0)}) - \n                          ({detection.bbox.x2.toFixed(0)}, {detection.bbox.y2.toFixed(0)})\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n\n                {/* Legend */}\n                <div className=\"mt-6\">\n                  <h4 className=\"font-semibold text-gray-800 mb-3\">Defect Types</h4>\n                  <div className=\"grid grid-cols-2 gap-2\">\n                    {Object.entries(defectColors).map(([defect, color]) => (\n                      <div key={defect} className=\"flex items-center gap-2\">\n                        <div \n                          className=\"w-4 h-4 rounded border\"\n                          style={{ backgroundColor: color }}\n                        ></div>\n                        <span className=\"text-sm capitalize\">\n                          {defect.replace('_', ' ')}\n                        </span>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PCBDefectDetector;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}